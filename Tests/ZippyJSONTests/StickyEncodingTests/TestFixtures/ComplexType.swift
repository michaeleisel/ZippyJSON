///
///  ComplexType.swift
///
///  Copyright 2017 Tony Stone
///
///  Licensed under the Apache License, Version 2.0 (the "License");
///  you may not use this file except in compliance with the License.
///  You may obtain a copy of the License at
///
///  http://www.apache.org/licenses/LICENSE-2.0
///
///  Unless required by applicable law or agreed to in writing, software
///  distributed under the License is distributed on an "AS IS" BASIS,
///  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
///  See the License for the specific language governing permissions and
///  limitations under the License.
///
///  Created by Tony Stone on 10/8/17.
///
import Swift

/// =================================== NOTICE ========================================
/// Do NOT edit this file directly as it will be regenerated automatically when needed.
///
/// Modify the  *.swift.gyb file instead.
/// ===================================================================================

///
/// Type: `ComplexClass`
///
/// Test type which represents a complex class used by a developer using the library.
///
public class ComplexClass: Codable, EquatableType, CustomStringConvertible {
    public var boolVar: Bool
    public var intVar: Int
    public var doubleVar: Double
    public var stringVar: String
    public var optionalStringVar: String?
    public var objectVar: BasicClass
    public var objectArrayVar: [BasicClass]

    public init(boolVar: Bool = false, intVar: Int = 0, doubleVar: Double = 0.00, stringVar: String = "", optionalStringVar: String? = nil, objectVar: BasicClass = BasicClass(), objectArrayVar: [BasicClass] = []) {
        self.boolVar           = boolVar
        self.intVar            = intVar
        self.doubleVar         = doubleVar
        self.stringVar         = stringVar
        self.optionalStringVar = optionalStringVar
        self.objectVar         = objectVar
        self.objectArrayVar    = objectArrayVar
    }

    public func equals<T>(_ other: T) -> Bool where T: ComplexClass {

        return self.boolVar           == other.boolVar &&
               self.intVar            == other.intVar &&
               self.doubleVar         == other.doubleVar &&
               self.stringVar         == other.stringVar &&
               self.optionalStringVar == other.optionalStringVar &&
               self.objectVar         == other.objectVar &&
               self.objectArrayVar.elementsEqual(other.objectArrayVar)
    }

    public static func == (lhs: ComplexClass, rhs: ComplexClass) -> Bool {
        return lhs.equals(rhs)
    }

    public var description: String {
        return "\(String(describing: type(of: self)))(boolVar: \(self.boolVar), intVar: \(self.intVar), doubleVar: \(self.doubleVar), stringVar: \"\(self.stringVar)\", optionalStringVar: \"\(self.optionalStringVar ?? "nil")\", objectVar: \(self.objectVar), objectArrayVar: \(self.objectArrayVar))"
    }
}

///
/// Type: `ComplexStruct`
///
/// Test type which represents a complex struct used by a developer using the library.
///
public struct ComplexStruct: Codable, EquatableType, CustomStringConvertible {
    public var boolVar: Bool
    public var intVar: Int
    public var doubleVar: Double
    public var stringVar: String
    public var optionalStringVar: String?
    public var objectVar: BasicStruct
    public var objectArrayVar: [BasicStruct]

    public init(boolVar: Bool = false, intVar: Int = 0, doubleVar: Double = 0.00, stringVar: String = "", optionalStringVar: String? = nil, objectVar: BasicStruct = BasicStruct(), objectArrayVar: [BasicStruct] = []) {
        self.boolVar           = boolVar
        self.intVar            = intVar
        self.doubleVar         = doubleVar
        self.stringVar         = stringVar
        self.optionalStringVar = optionalStringVar
        self.objectVar         = objectVar
        self.objectArrayVar    = objectArrayVar
    }

    public func equals(_ other: ComplexStruct) -> Bool {

        return self.boolVar           == other.boolVar &&
               self.intVar            == other.intVar &&
               self.doubleVar         == other.doubleVar &&
               self.stringVar         == other.stringVar &&
               self.optionalStringVar == other.optionalStringVar &&
               self.objectVar         == other.objectVar &&
               self.objectArrayVar.elementsEqual(other.objectArrayVar)
    }

    public static func == (lhs: ComplexStruct, rhs: ComplexStruct) -> Bool {
        return lhs.equals(rhs)
    }

    public var description: String {
        return "\(String(describing: type(of: self)))(boolVar: \(self.boolVar), intVar: \(self.intVar), doubleVar: \(self.doubleVar), stringVar: \"\(self.stringVar)\", optionalStringVar: \"\(self.optionalStringVar ?? "nil")\", objectVar: \(self.objectVar), objectArrayVar: \(self.objectArrayVar))"
    }
}

